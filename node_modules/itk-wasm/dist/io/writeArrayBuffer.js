import writeImageArrayBuffer from './writeImageArrayBuffer.js';
import writeMeshArrayBuffer from './writeMeshArrayBuffer.js';
import getFileExtension from './getFileExtension.js';
import extensionToMeshIO from './internal/extensionToMeshIO.js';
import mimeToMeshIO from './internal/MimeToMeshIO.js';
async function writeArrayBuffer(webWorker, useCompression, imageOrMesh, fileName, mimeType) {
    const extension = getFileExtension(fileName);
    const isMesh = !!extensionToMeshIO.has(extension) || !!mimeToMeshIO.has(mimeType);
    if (isMesh) {
        return await writeMeshArrayBuffer(webWorker, { useCompression }, imageOrMesh, fileName, mimeType)
            .catch(async function () {
            if (webWorker != null) {
                webWorker.terminate();
            }
            return await writeImageArrayBuffer(null, useCompression, imageOrMesh, fileName, mimeType);
        });
    }
    else {
        return await writeImageArrayBuffer(webWorker, useCompression, imageOrMesh, fileName, mimeType);
    }
}
export default writeArrayBuffer;
