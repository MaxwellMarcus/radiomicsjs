import createWebWorkerPromise from '../core/internal/createWebWorkerPromise.js';
import config from '../itkConfig.js';
async function writeMeshArrayBuffer(webWorker, options, mesh, fileName, mimeType) {
    let worker = webWorker;
    return await createWebWorkerPromise('mesh-io', worker)
        .then(({ webworkerPromise, worker: usedWorker }) => {
        worker = usedWorker;
        const transferables = [];
        if (mesh.points != null) {
            transferables.push(mesh.points.buffer);
        }
        if (mesh.pointData != null) {
            transferables.push(mesh.pointData.buffer);
        }
        if (mesh.cells != null) {
            transferables.push(mesh.cells.buffer);
        }
        if (mesh.cellData != null) {
            transferables.push(mesh.cellData.buffer);
        }
        let useCompression = false;
        if (typeof options.useCompression !== 'undefined') {
            useCompression = options.useCompression;
        }
        let binaryFileType = false;
        if (typeof options.binaryFileType !== 'undefined') {
            binaryFileType = options.binaryFileType;
        }
        return webworkerPromise.postMessage({
            operation: 'writeMesh',
            name: fileName,
            type: mimeType,
            mesh,
            useCompression,
            binaryFileType,
            config
        }, transferables).then(async function (arrayBuffer) {
            return await Promise.resolve({ arrayBuffer, webWorker: worker });
        });
    });
}
export default writeMeshArrayBuffer;
