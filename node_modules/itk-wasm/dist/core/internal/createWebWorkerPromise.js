import axios from 'axios';
import WebworkerPromise from 'webworker-promise';
import config from '../../itkConfig.js';
// Internal function to create a web worker promise
async function createWebWorkerPromise(name, existingWorker) {
    if (existingWorker != null) {
        const webworkerPromise = new WebworkerPromise(existingWorker);
        return await Promise.resolve({ webworkerPromise, worker: existingWorker });
    }
    let worker = null;
    // Enable bundlers, e.g. WebPack, to see these paths at build time
    // importScripts / UMD is required over dynamic ESM import until Firefox
    // adds worker dynamic import support:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1540913
    // switch (name) {
    // case 'mesh-io':
    // worker = new Worker(new URL('../../web-workers/mesh-io.worker.js', import.meta.url))
    // break
    // case 'pipeline':
    // worker = new Worker(new URL('../../web-workers/pipeline.worker.js', import.meta.url))
    // break
    // default:
    // throw Error('Unsupported web worker type')
    // }
    const webWorkersUrl = config.webWorkersUrl;
    const min = 'min-';
    // debug
    // const min = ''
    if (webWorkersUrl.startsWith('http')) {
        switch (name) {
            case 'mesh-io': {
                const response = await axios.get(`${webWorkersUrl}/${min}bundles/mesh-io.worker.js`, { responseType: 'blob' });
                worker = new Worker(URL.createObjectURL(response.data));
                break;
            }
            case 'pipeline': {
                const response = await axios.get(`${webWorkersUrl}/${min}bundles/pipeline.worker.js`, { responseType: 'blob' });
                worker = new Worker(URL.createObjectURL(response.data));
                break;
            }
            default:
                throw Error('Unsupported web worker type');
        }
    }
    else {
        switch (name) {
            case 'mesh-io':
                worker = new Worker(`${webWorkersUrl}/${min}bundles/mesh-io.worker.js`);
                break;
            case 'pipeline':
                worker = new Worker(`${webWorkersUrl}/${min}bundles/pipeline.worker.js`);
                break;
            default:
                throw Error('Unsupported web worker type');
        }
    }
    const webworkerPromise = new WebworkerPromise(worker);
    return { webworkerPromise, worker };
}
export default createWebWorkerPromise;
